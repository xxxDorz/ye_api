"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllModels = exports.getModelUtil = void 0;
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const modelUtils_1 = require("./utils/modelUtils");
const withTmpPath_1 = require("./utils/withTmpPath");
exports.default = (api) => {
    const pkgPath = (0, path_1.join)((0, path_1.dirname)(require.resolve('@umijs/plugins/package.json')), 'libs', 'dva.ts');
    // const enableBy = (opts: any) => {
    //   return !!opts.config.dva;
    // };
    api.describe({
        config: {
            schema(Joi) {
                return Joi.object({
                    extraModels: Joi.array().items(Joi.string()),
                    enableModelsReExport: Joi.object(),
                    immer: Joi.object(),
                });
            },
        },
        // enableBy,
    });
    api.addRuntimePluginKey(() => ['dva']);
    // only dev or build running
    if (!['dev', 'build', 'dev-config', 'preview'].includes(api.name))
        return;
    api.onStart(() => {
        utils_1.logger.info('Using Dva Plugin');
    });
    api.modifyAppData((memo) => {
        const models = getAllModels(api);
        memo.pluginDva = {
            pkgPath,
            models,
        };
        return memo;
    });
    api.modifyConfig((memo) => {
        // import from dva
        memo.alias['dva$'] = pkgPath;
        return memo;
    });
    api.onGenerateFiles((args) => {
        const models = args.isFirstTime
            ? api.appData.pluginDva.models
            : getAllModels(api);
        // models.ts
        api.writeTmpFile({
            path: 'models.ts',
            content: modelUtils_1.ModelUtils.getModelsContent(models),
        });
        // types.ts
        api.writeTmpFile({
            path: 'types.d.ts',
            tpl: `
export interface ConnectProps {
      dispatch?: Dispatch;
      // 兼容 alita2
      match?: any;
      location?: any;
      history?: History;
      route?: any;
      routes?: any;
}
type RequiredConnectProps = Required<ConnectProps>
export type ConnectRC<
      T = {},
      > = React.ForwardRefRenderFunction<any, T & RequiredConnectProps>;
interface Action<T = any> {
      type: T
}
interface AnyAction extends Action {
      // Allows any extra properties to be defined in an action.
      [extraProps: string]: any
}
interface Dispatch<A extends Action = AnyAction> {
      <T extends A>(action: T): T
}
interface EffectsCommandMap {
      put: <A extends AnyAction>(action: A) => any,
      call: Function,
      select: Function,
      take: Function,
      cancel: Function,
      [key: string]: any,
}
interface Action<T = any> {
      type: T
}
export type Reducer<S = any, A extends Action = AnyAction> = (prevState: S, action: A) => S;
export type Effect = (action: AnyAction, effects: EffectsCommandMap) => void;
type EffectType = 'takeEvery' | 'takeLatest' | 'watcher' | 'throttle';
type EffectWithType = [Effect, { type: EffectType }];
export type Subscription = (api: SubscriptionAPI, done: Function) => void;

export interface ReducersMapObject<T> {
      [key: string]: Reducer<T>,
}
export interface EffectsMapObject {
      [key: string]: Effect | EffectWithType,
}
export interface SubscriptionAPI {
      dispatch: Dispatch<any>,
}
export interface SubscriptionsMapObject {
      [key: string]: Subscription,
}
export interface DvaModel<T, E = EffectsMapObject, R = ReducersMapObject<T>> {
      namespace: string,
      state?: T,
      reducers?: R,
      effects?: E,
      subscriptions?: SubscriptionsMapObject,
}
${api.config.dva?.enableModelsReExport
                ? models
                    .map((model) => {
                    const { file, namespace } = model;
                    // prettier-ignore
                    // export type { IndexModelState } from '/Users/xiaohuoni/next-alita-app/src/models/index';
                    return `export type { ${namespace.replace(/( |^)[a-z]/g, (L) => L.toUpperCase())}ModelState } from '${(0, utils_1.winPath)(file.replace((0, path_1.extname)(file), ''))}';`;
                })
                    .join('\r\n')
                : ''}
      `,
            context: {},
        });
        // dva.tsx
        api.writeTmpFile({
            path: 'dva.tsx',
            tpl: `
// It's faked dva
// aliased to @umijs/plugins/templates/dva
import { create, Provider } from 'dva';
import createLoading from '${(0, utils_1.winPath)(require.resolve('dva-loading'))}';
${api.config.dva?.immer
                ? `
import dvaImmer, { enableES5, enableAllPlugins } from '${(0, utils_1.winPath)(require.resolve('dva-immer'))}';
`
                : ''}
import React, { useRef } from 'react';
import { history, ApplyPluginsType, useAppData } from 'umi';
import { models } from './models';

let dvaApp: any;

export function RootContainer(props: any) {
  const { pluginManager } = useAppData();
  const app = useRef<any>();
  const runtimeDva = pluginManager.applyPlugins({
    key: 'dva',
    type: ApplyPluginsType.modify,
    initialValue: {},
  });
  if (!app.current) {
    app.current = create(
      {
        history,
        ...(runtimeDva.config || {}),
      },
      {
        initialReducer: {},
        setupMiddlewares(middlewares: Function[]) {
          return [...middlewares];
        },
        setupApp(app: IDvaApp) {
          app._history = history;
        },
      },
    );
    dvaApp = app.current;
    app.current.use(createLoading());
    ${api.config.dva?.immer ? `app.current.use(dvaImmer());` : ''}
    ${api.config.dva?.immer?.enableES5 ? `enableES5();` : ''}
    ${api.config.dva?.immer?.enableAllPlugins ? `enableAllPlugins();` : ''}
    (runtimeDva.plugins || []).forEach((p) => {
      app.current.use(p);
    });
    for (const id of Object.keys(models)) {
      app.current.model({
        namespace: models[id].namespace,
        ...models[id].model,
      });
    }
    app.current.start();
  }
  return <Provider store={app.current!._store}>{props.children}</Provider>;
}

export function getDvaApp() {
  return dvaApp;
}
      `,
            context: {},
        });
        // runtime.tsx
        api.writeTmpFile({
            path: 'runtime.tsx',
            content: `
import React from 'react';
import { RootContainer } from './dva';

export function dataflowProvider(container, opts) {
  return React.createElement(RootContainer, opts, container);
}
      `,
        });
        // index.ts for export
        api.writeTmpFile({
            path: 'index.ts',
            content: `
export { connect, useDispatch, useStore, useSelector } from 'dva';
export { getDvaApp } from './dva';
`,
        });
    });
    api.addTmpGenerateWatcherPaths(() => {
        return [(0, path_1.join)(api.paths.absSrcPath, 'models')];
    });
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })];
    });
    // dva list model
    api.registerCommand({
        name: 'dva',
        fn() {
            api.logger.info(utils_1.chalk.green.bold('dva models'));
            api.appData.pluginDva.models.forEach((model) => {
                api.logger.info(`  - ${(0, path_1.relative)(api.cwd, model.file)}`);
            });
        },
    });
};
function getModelUtil(api) {
    return new modelUtils_1.ModelUtils(api, {
        contentTest(content) {
            return content.startsWith('// @dva-model');
        },
        astTest({ node, content }) {
            if (isModelObject(node)) {
                return true;
            }
            else if (content.includes('dva-model-extend') &&
                t.isCallExpression(node) &&
                node.arguments.length === 2 &&
                isModelObject(node.arguments[1])) {
                return true;
            }
            return false;
        },
    });
}
exports.getModelUtil = getModelUtil;
function getAllModels(api) {
    return getModelUtil(api).getAllModels({
        extraModels: [...(api.config.dva.extraModels || [])],
    });
}
exports.getAllModels = getAllModels;
function isModelObject(node) {
    return (t.isObjectExpression(node) &&
        node.properties.some((property) => {
            return [
                'state',
                'reducers',
                'subscriptions',
                'effects',
                'namespace',
            ].includes(property.key.name);
        }));
}
