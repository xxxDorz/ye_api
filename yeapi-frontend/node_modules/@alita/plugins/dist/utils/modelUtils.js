"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelUtils = exports.Model = void 0;
const parser = __importStar(require("@umijs/bundler-utils/compiled/babel/parser"));
const traverse_1 = __importDefault(require("@umijs/bundler-utils/compiled/babel/traverse"));
const esbuild_1 = require("@umijs/bundler-utils/compiled/esbuild");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const astUtils_1 = require("./astUtils");
class Model {
    file;
    namespace;
    id;
    exportName;
    constructor(file, id) {
        let namespace;
        let exportName;
        const [_file, meta] = file.split('#');
        if (meta) {
            const metaObj = JSON.parse(meta);
            namespace = metaObj.namespace;
            exportName = metaObj.exportName;
        }
        this.file = _file;
        this.id = `model_${id}`;
        this.namespace = namespace || (0, path_1.basename)(file, (0, path_1.extname)(file));
        this.exportName = exportName || 'default';
    }
}
exports.Model = Model;
class ModelUtils {
    api;
    opts = {};
    count = 1;
    constructor(api, opts) {
        this.api = api;
        this.opts = opts;
    }
    getAllModels(opts) {
        // reset count
        this.count = 1;
        return [
            ...this.getModels({
                base: (0, path_1.join)(this.api.paths.absSrcPath, 'models'),
                pattern: '**/*.{ts,tsx,js,jsx}',
            }),
            ...this.getModels({
                base: (0, path_1.join)(this.api.paths.absPagesPath),
                pattern: '**/models/**/*.{ts,tsx,js,jsx}',
            }),
            ...this.getModels({
                base: (0, path_1.join)(this.api.paths.absPagesPath),
                pattern: '**/model.{ts,tsx,js,jsx}',
            }),
            ...opts.extraModels,
        ].map((file) => {
            return new Model(file, this.count++);
        });
    }
    getModels(opts) {
        return utils_1.glob
            .sync(opts.pattern || '**/*.{ts,js}', {
            cwd: opts.base,
            absolute: true,
        })
            .map(utils_1.winPath)
            .filter((file) => {
            if (/\.d.ts$/.test(file))
                return false;
            if (/\.(test|e2e|spec).([jt])sx?$/.test(file))
                return false;
            const content = (0, fs_1.readFileSync)(file, 'utf-8');
            return this.isModelValid({ content, file });
        });
    }
    isModelValid(opts) {
        const { file, content } = opts;
        if (this.opts.contentTest && this.opts.contentTest(content)) {
            return true;
        }
        // transform with esbuild first
        // to reduce unexpected ast problem
        const loader = (0, path_1.extname)(file).slice(1);
        const result = (0, esbuild_1.transformSync)(content, {
            loader,
            sourcemap: false,
            minify: false,
        });
        // transform with babel
        let ret = false;
        const ast = parser.parse(result.code, {
            sourceType: 'module',
            sourceFilename: file,
            plugins: [],
        });
        (0, traverse_1.default)(ast, {
            ExportDefaultDeclaration: (path) => {
                let node = path.node.declaration;
                node = (0, astUtils_1.getIdentifierDeclaration)(node, path);
                if (this.opts.astTest && this.opts.astTest({ node, content })) {
                    ret = true;
                }
            },
        });
        return ret;
    }
    static getModelsContent(models) {
        const imports = [];
        const modelProps = [];
        models.forEach((model) => {
            if (model.exportName !== 'default') {
                imports.push(`import { ${model.exportName} as ${model.id} } from '${model.file}';`);
            }
            else {
                imports.push(`import ${model.id} from '${model.file}';`);
            }
            modelProps.push(`${model.id}: { namespace: '${model.namespace}', model: ${model.id} },`);
        });
        return `
${imports.join('\n')}

export const models = {
${modelProps.join('\n')}
}`;
    }
}
exports.ModelUtils = ModelUtils;
