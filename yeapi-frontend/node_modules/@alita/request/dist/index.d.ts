import { OnionMiddleware, RequestInterceptor, RequestOptionsInit, RequestOptionsWithoutResponse, RequestOptionsWithResponse, RequestResponse, ResponseInterceptor } from 'umi-request';
export interface RequestConfig extends RequestOptionsInit {
    middlewares?: OnionMiddleware[];
    requestInterceptors?: RequestInterceptor[];
    responseInterceptors?: ResponseInterceptor[];
}
interface RequestMethodInUmi<R = false> {
    <T = any>(url: string, options: RequestOptionsWithResponse & {
        skipErrorHandler?: boolean;
    }): Promise<RequestResponse<T>>;
    <T = any>(url: string, options: RequestOptionsWithoutResponse & {
        skipErrorHandler?: boolean;
    }): Promise<T>;
    <T = any>(url: string, options?: RequestOptionsInit & {
        skipErrorHandler?: boolean;
    }): R extends true ? Promise<RequestResponse<T>> : Promise<T>;
}
declare const request: RequestMethodInUmi;
declare const setRequestConfig: (config: RequestConfig) => void;
declare const getRequestConfig: () => RequestConfig;
export * from 'umi-request';
export { request, setRequestConfig, getRequestConfig };
