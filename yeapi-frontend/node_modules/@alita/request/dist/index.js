"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequestConfig = exports.setRequestConfig = exports.request = void 0;
var umi_request_1 = require("umi-request");
var requestMethodInstance;
var requestConfig = {};
var getRequestMethod = function () {
    if (requestMethodInstance) {
        // request method 已经示例化
        return requestMethodInstance;
    }
    requestMethodInstance = (0, umi_request_1.extend)(__assign({}, requestConfig));
    // Add user custom middlewares
    var customMiddlewares = requestConfig.middlewares || [];
    customMiddlewares.forEach(function (mw) {
        requestMethodInstance.use(mw);
    });
    // Add user custom interceptors
    var requestInterceptors = requestConfig.requestInterceptors || [];
    var responseInterceptors = requestConfig.responseInterceptors || [];
    requestInterceptors.map(function (ri) {
        requestMethodInstance.interceptors.request.use(ri);
    });
    responseInterceptors.map(function (ri) {
        requestMethodInstance.interceptors.response.use(ri);
    });
    return requestMethodInstance;
};
var request = function (url, options) {
    var requestMethod = getRequestMethod();
    return requestMethod(url, options);
};
exports.request = request;
var setRequestConfig = function (config) {
    requestConfig = config;
};
exports.setRequestConfig = setRequestConfig;
var getRequestConfig = function () {
    return requestConfig;
};
exports.getRequestConfig = getRequestConfig;
__exportStar(require("umi-request"), exports);
