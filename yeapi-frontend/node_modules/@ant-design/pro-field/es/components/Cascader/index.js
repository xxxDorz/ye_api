import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["radioType", "renderFormItem", "mode", "render", "label", "light"];
import { LoadingOutlined } from '@ant-design/icons';
import { useIntl } from '@ant-design/pro-provider';
import { FieldLabel } from '@ant-design/pro-utils';
import { Cascader, ConfigProvider } from 'antd';
import classNames from 'classnames';
import React, { useContext, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { ObjToMap, proFieldParsingText, useFieldFetchData } from "../Select";
import { ConfigContext } from "antd/es/config-provider";
// 兼容代码-----------
import "antd/es/cascader/style";
//----------------------
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * 级联选择组件
 *
 * @param param0
 * @param ref
 */
var FieldCascader = function FieldCascader(_ref, ref) {
  var _ConfigProvider$useCo, _rest$fieldProps2;
  var radioType = _ref.radioType,
    renderFormItem = _ref.renderFormItem,
    mode = _ref.mode,
    render = _ref.render,
    label = _ref.label,
    light = _ref.light,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = useContext(ConfigContext || ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var _ref2 = (ConfigProvider === null || ConfigProvider === void 0 ? void 0 : (_ConfigProvider$useCo = ConfigProvider.useConfig) === null || _ConfigProvider$useCo === void 0 ? void 0 : _ConfigProvider$useCo.call(ConfigProvider)) || {
      componentSize: 'middle'
    },
    componentSize = _ref2.componentSize;
  var layoutClassName = getPrefixCls('pro-field-cascader');
  var _useFieldFetchData = useFieldFetchData(rest),
    _useFieldFetchData2 = _slicedToArray(_useFieldFetchData, 3),
    loading = _useFieldFetchData2[0],
    options = _useFieldFetchData2[1],
    _fetchData = _useFieldFetchData2[2];
  var intl = useIntl();
  var cascaderRef = useRef();
  var size = componentSize;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, cascaderRef.current || {}), {}, {
      fetchData: function fetchData(keyWord) {
        return _fetchData(keyWord);
      }
    });
  });
  var optionsValueEnum = useMemo(function () {
    var _rest$fieldProps;
    if (mode !== 'read') return;
    /**
     * Support cascader fieldNames
     *
     * @see https://ant.design/components/cascader-cn/#header
     */
    var _ref3 = ((_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.fieldNames) || {},
      _ref3$value = _ref3.value,
      valuePropsName = _ref3$value === void 0 ? 'value' : _ref3$value,
      _ref3$label = _ref3.label,
      labelPropsName = _ref3$label === void 0 ? 'label' : _ref3$label,
      _ref3$children = _ref3.children,
      childrenPropsName = _ref3$children === void 0 ? 'children' : _ref3$children;
    var valuesMap = new Map();
    var traverseOptions = function traverseOptions(_options) {
      if (!(_options !== null && _options !== void 0 && _options.length)) {
        return valuesMap;
      }
      var length = _options.length;
      var i = 0;
      while (i < length) {
        var cur = _options[i++];
        valuesMap.set(cur[valuePropsName], cur[labelPropsName]);
        traverseOptions(cur[childrenPropsName]);
      }
      return valuesMap;
    };
    return traverseOptions(options);
  }, [mode, options, (_rest$fieldProps2 = rest.fieldProps) === null || _rest$fieldProps2 === void 0 ? void 0 : _rest$fieldProps2.fieldNames]);
  if (mode === 'read') {
    var dom = /*#__PURE__*/_jsx(_Fragment, {
      children: proFieldParsingText(rest.text, ObjToMap(rest.valueEnum || optionsValueEnum))
    });
    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), dom) || null;
    }
    return dom;
  }
  if (mode === 'edit') {
    var _rest$fieldProps3;
    var _dom = /*#__PURE__*/_jsx(Cascader, _objectSpread(_objectSpread({
      bordered: !light,
      ref: cascaderRef,
      open: open,
      onDropdownVisibleChange: setOpen,
      suffixIcon: loading ? /*#__PURE__*/_jsx(LoadingOutlined, {}) : light ? null : undefined,
      placeholder: intl.getMessage('tableForm.selectPlaceholder', '请选择'),
      allowClear: light ? false : undefined
    }, rest.fieldProps), {}, {
      className: classNames((_rest$fieldProps3 = rest.fieldProps) === null || _rest$fieldProps3 === void 0 ? void 0 : _rest$fieldProps3.className, layoutClassName),
      options: options
    }));
    if (renderFormItem) {
      _dom = renderFormItem(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), _dom) || null;
    }
    if (light) {
      var _rest$fieldProps4 = rest.fieldProps,
        disabled = _rest$fieldProps4.disabled,
        allowClear = _rest$fieldProps4.allowClear,
        placeholder = _rest$fieldProps4.placeholder;
      return /*#__PURE__*/_jsx(FieldLabel, {
        label: label,
        disabled: disabled,
        placeholder: placeholder,
        size: size,
        allowClear: allowClear,
        bordered: rest.bordered,
        value: _dom,
        onLabelClick: function onLabelClick() {
          return setOpen(!open);
        },
        onClear: function onClear() {
          var _rest$fieldProps5, _rest$fieldProps5$onC;
          return (_rest$fieldProps5 = rest.fieldProps) === null || _rest$fieldProps5 === void 0 ? void 0 : (_rest$fieldProps5$onC = _rest$fieldProps5.onChange) === null || _rest$fieldProps5$onC === void 0 ? void 0 : _rest$fieldProps5$onC.call(_rest$fieldProps5, undefined, undefined, {});
        }
      });
    }
    return _dom;
  }
  return null;
};
export default /*#__PURE__*/React.forwardRef(FieldCascader);