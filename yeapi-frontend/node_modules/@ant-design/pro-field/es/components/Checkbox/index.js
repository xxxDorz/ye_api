import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["layout", "renderFormItem", "mode", "render"];
import { useStyle } from '@ant-design/pro-utils';
import { Checkbox, ConfigProvider, Space, Spin } from 'antd';
import classNames from 'classnames';
import React, { useContext, useImperativeHandle, useRef } from 'react';
import { ObjToMap, proFieldParsingText, useFieldFetchData } from "../Select";
import { ConfigContext } from "antd/es/config-provider";
// 兼容代码-----------
import "antd/es/checkbox/style";
//----------------------
/**
 * 多选组件
 *
 * @param param0
 * @param ref
 */
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var FieldCheckbox = function FieldCheckbox(_ref, ref) {
  var _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? 'horizontal' : _ref$layout,
    renderFormItem = _ref.renderFormItem,
    mode = _ref.mode,
    render = _ref.render,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = useContext(ConfigContext || ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var layoutClassName = getPrefixCls('pro-field-checkbox');
  var _useFieldFetchData = useFieldFetchData(rest),
    _useFieldFetchData2 = _slicedToArray(_useFieldFetchData, 3),
    loading = _useFieldFetchData2[0],
    options = _useFieldFetchData2[1],
    _fetchData = _useFieldFetchData2[2];
  // css
  var _useStyle = useStyle('Checkbox', function (token) {
      var _vertical;
      return _defineProperty({}, ".".concat(layoutClassName), {
        '&-vertical': (_vertical = {}, _defineProperty(_vertical, "&".concat(token.antCls, "-checkbox-group"), {
          display: 'inline-block'
        }), _defineProperty(_vertical, "".concat(token.antCls, "-checkbox-wrapper+").concat(token.antCls, "-checkbox-wrapper"), {
          'margin-inline-start': '0  !important'
        }), _defineProperty(_vertical, "".concat(token.antCls, "-checkbox-group-item"), {
          display: 'flex',
          marginInlineEnd: 0
        }), _vertical)
      });
    }),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var checkBoxRef = useRef();
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, checkBoxRef.current || {}), {}, {
      fetchData: function fetchData(keyWord) {
        return _fetchData(keyWord);
      }
    });
  });
  if (loading) {
    return /*#__PURE__*/_jsx(Spin, {
      size: "small"
    });
  }
  if (mode === 'read') {
    var optionsValueEnum = options !== null && options !== void 0 && options.length ? options === null || options === void 0 ? void 0 : options.reduce(function (pre, cur) {
      var _cur$value;
      return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, (_cur$value = cur.value) !== null && _cur$value !== void 0 ? _cur$value : '', cur.label));
    }, {}) : undefined;
    var dom = proFieldParsingText(rest.text, ObjToMap(rest.valueEnum || optionsValueEnum));
    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), /*#__PURE__*/_jsx(_Fragment, {
        children: dom
      })) || null;
    }
    return /*#__PURE__*/_jsx(Space, {
      children: dom
    });
  }
  if (mode === 'edit') {
    var _rest$fieldProps;
    var _dom = wrapSSR( /*#__PURE__*/_jsx(Checkbox.Group, _objectSpread(_objectSpread({}, rest.fieldProps), {}, {
      className: classNames((_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.className, hashId, "".concat(layoutClassName, "-").concat(layout)),
      options: options
    })));
    if (renderFormItem) {
      return renderFormItem(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), _dom) || null;
    }
    return _dom;
  }
  return null;
};
export default /*#__PURE__*/React.forwardRef(FieldCheckbox);