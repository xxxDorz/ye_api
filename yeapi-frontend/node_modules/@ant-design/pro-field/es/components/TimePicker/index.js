import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { FieldLabel, parseValueToDay } from '@ant-design/pro-utils';
import { ConfigProvider, DatePicker, TimePicker } from 'antd';
import dayjs from 'dayjs';
import React, { useState } from 'react';
// 兼容代码-----------
import "antd/es/date-picker/style";
import { useDatePickerStyle } from "../DatePicker";
//----------------------;

/**
 * 时间选择组件
 *
 * @param
 */
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var FieldTimePicker = function FieldTimePicker(_ref, ref) {
  var _ConfigProvider$useCo;
  var text = _ref.text,
    mode = _ref.mode,
    light = _ref.light,
    label = _ref.label,
    format = _ref.format,
    render = _ref.render,
    renderFormItem = _ref.renderFormItem,
    plain = _ref.plain,
    fieldProps = _ref.fieldProps,
    lightLabel = _ref.lightLabel,
    labelTrigger = _ref.labelTrigger;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _ref2 = (ConfigProvider === null || ConfigProvider === void 0 ? void 0 : (_ConfigProvider$useCo = ConfigProvider.useConfig) === null || _ConfigProvider$useCo === void 0 ? void 0 : _ConfigProvider$useCo.call(ConfigProvider)) || {
      componentSize: 'middle'
    },
    componentSize = _ref2.componentSize;
  var size = componentSize;
  var _useDatePickerStyle = useDatePickerStyle(),
    hashId = _useDatePickerStyle.hashId,
    prefixCls = _useDatePickerStyle.prefixCls,
    wrapSSR = _useDatePickerStyle.wrapSSR;
  var finalFormat = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.format) || format || 'HH:mm:ss';
  var isNumberOrMoment = dayjs.isDayjs(text) || typeof text === 'number';
  if (mode === 'read') {
    var dom = /*#__PURE__*/_jsx("span", {
      ref: ref,
      children: text ? dayjs(text, isNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '-'
    });
    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), /*#__PURE__*/_jsx("span", {
        children: dom
      }));
    }
    return dom;
  }
  if (mode === 'edit' || mode === 'update') {
    var _dom;
    var disabled = fieldProps.disabled,
      onChange = fieldProps.onChange,
      placeholder = fieldProps.placeholder,
      allowClear = fieldProps.allowClear,
      value = fieldProps.value;
    var dayValue = parseValueToDay(value, finalFormat);
    if (light) {
      var valueStr = dayValue && dayValue.format(finalFormat) || '';
      _dom = wrapSSR( /*#__PURE__*/_jsxs("div", {
        className: "".concat(prefixCls, "-light ").concat(hashId),
        onClick: function onClick(e) {
          var _lightLabel$current, _lightLabel$current$l, _lightLabel$current$l2;
          // 点击label切换下拉菜单
          var isLabelClick = lightLabel === null || lightLabel === void 0 ? void 0 : (_lightLabel$current = lightLabel.current) === null || _lightLabel$current === void 0 ? void 0 : (_lightLabel$current$l = _lightLabel$current.labelRef) === null || _lightLabel$current$l === void 0 ? void 0 : (_lightLabel$current$l2 = _lightLabel$current$l.current) === null || _lightLabel$current$l2 === void 0 ? void 0 : _lightLabel$current$l2.contains(e.target);
          if (isLabelClick) {
            setOpen(!open);
          } else {
            setOpen(true);
          }
        },
        children: [/*#__PURE__*/_jsx(TimePicker, _objectSpread(_objectSpread({
          value: dayValue,
          format: format,
          ref: ref
        }, fieldProps), {}, {
          onChange: /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(v) {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return onChange === null || onChange === void 0 ? void 0 : onChange(v);
                  case 2:
                    _context.next = 4;
                    return setOpen(false);
                  case 4:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function (_x) {
              return _ref3.apply(this, arguments);
            };
          }(),
          onOpenChange: function onOpenChange(isOpen) {
            if (!labelTrigger) {
              setOpen(isOpen);
            }
          },
          open: open
        })), /*#__PURE__*/_jsx(FieldLabel, {
          label: label,
          disabled: disabled,
          placeholder: placeholder,
          size: size,
          value: valueStr,
          allowClear: allowClear,
          onClear: function onClear() {
            return onChange === null || onChange === void 0 ? void 0 : onChange(null);
          },
          expanded: open,
          ref: lightLabel
        })]
      }));
    } else {
      _dom = /*#__PURE__*/_jsx(DatePicker.TimePicker, _objectSpread(_objectSpread({
        ref: ref,
        format: format,
        bordered: plain === undefined ? true : !plain
      }, fieldProps), {}, {
        value: dayValue
      }));
    }
    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom);
    }
    return _dom;
  }
  return null;
};

/**
 * 时间区间选择
 *
 * @param param0
 * @param ref
 */
var FieldTimeRangePickerComponents = function FieldTimeRangePickerComponents(_ref4, ref) {
  var text = _ref4.text,
    mode = _ref4.mode,
    format = _ref4.format,
    render = _ref4.render,
    renderFormItem = _ref4.renderFormItem,
    plain = _ref4.plain,
    fieldProps = _ref4.fieldProps;
  var finalFormat = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.format) || format || 'HH:mm:ss';
  var _ref5 = Array.isArray(text) ? text : [],
    _ref6 = _slicedToArray(_ref5, 2),
    startText = _ref6[0],
    endText = _ref6[1];
  var startTextIsNumberOrMoment = dayjs.isDayjs(startText) || typeof startText === 'number';
  var endTextIsNumberOrMoment = dayjs.isDayjs(endText) || typeof endText === 'number';
  var parsedStartText = startText ? dayjs(startText, startTextIsNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '';
  var parsedEndText = endText ? dayjs(endText, endTextIsNumberOrMoment ? undefined : finalFormat).format(finalFormat) : '';
  if (mode === 'read') {
    var dom = /*#__PURE__*/_jsxs("div", {
      ref: ref,
      children: [/*#__PURE__*/_jsx("div", {
        children: parsedStartText || '-'
      }), /*#__PURE__*/_jsx("div", {
        children: parsedEndText || '-'
      })]
    });
    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), /*#__PURE__*/_jsx("span", {
        children: dom
      }));
    }
    return dom;
  }
  if (mode === 'edit' || mode === 'update') {
    var value = fieldProps.value;
    var momentValue = parseValueToDay(value, finalFormat);
    var _dom2 = /*#__PURE__*/_jsx(TimePicker.RangePicker, _objectSpread(_objectSpread({
      ref: ref,
      format: format,
      bordered: plain === undefined ? true : !plain
    }, fieldProps), {}, {
      value: momentValue
    }));
    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom2);
    }
    return _dom2;
  }
  return null;
};
var FieldTimeRangePicker = /*#__PURE__*/React.forwardRef(FieldTimeRangePickerComponents);
export { FieldTimeRangePicker };
export default /*#__PURE__*/React.forwardRef(FieldTimePicker);