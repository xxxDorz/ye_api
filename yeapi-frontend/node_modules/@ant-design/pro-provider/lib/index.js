"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ConfigConsumer: true,
  ProConfigProvider: true,
  useIntl: true,
  ProProvider: true
};
exports.default = exports.ProProvider = exports.ProConfigProvider = exports.ConfigConsumer = void 0;
exports.useIntl = useIntl;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _cssinjs = require("@ant-design/cssinjs");
var _antd = require("antd");
var _configProvider = require("antd/lib/config-provider");
var _zh_CN = _interopRequireDefault(require("antd/lib/locale/zh_CN"));
var _react = _interopRequireWildcard(require("react"));
var _swr = require("swr");
var _intl = require("./intl");
Object.keys(_intl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _intl[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _intl[key];
    }
  });
});
var _layoutToken = require("./typing/layoutToken");
var _useStyle = require("./useStyle");
Object.keys(_useStyle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useStyle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useStyle[key];
    }
  });
});
var _token = require("./useStyle/token");
var _merge = require("./utils/merge");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["locale", "getPrefixCls"],
  _excluded2 = ["locale", "theme"];
/* Creating a context object with the default values. */
var ProConfigContext = /*#__PURE__*/_react.default.createContext({
  intl: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _intl.zhCNIntl), {}, {
    locale: 'default'
  }),
  valueTypeMap: {},
  theme: _token.emptyTheme,
  hashed: true,
  dark: false,
  token: _token.defaultToken
});
var ConfigConsumer = ProConfigContext.Consumer;

/**
 * 组件解除挂载后清空一下 cache
 * @date 2022-11-28
 * @returns null
 */
exports.ConfigConsumer = ConfigConsumer;
var CacheClean = function CacheClean() {
  var _useSWRConfig = (0, _swr.useSWRConfig)(),
    cache = _useSWRConfig.cache;
  (0, _react.useEffect)(function () {
    return function () {
      // is a map
      // @ts-ignore
      cache.clear();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
};

/**
 * 用于配置 Pro 的组件,分装之后会简单一些
 * @param props
 * @returns
 */
var ConfigProviderContainer = function ConfigProviderContainer(props) {
  var _proTheme$useToken;
  var children = props.children,
    dark = props.dark,
    valueTypeMap = props.valueTypeMap,
    _props$autoClearCache = props.autoClearCache,
    autoClearCache = _props$autoClearCache === void 0 ? false : _props$autoClearCache,
    propsToken = props.token,
    prefixCls = props.prefixCls;
  var _useContext = (0, _react.useContext)(_configProvider.ConfigContext || _antd.ConfigProvider.ConfigContext),
    locale = _useContext.locale,
    getPrefixCls = _useContext.getPrefixCls,
    restConfig = (0, _objectWithoutProperties2.default)(_useContext, _excluded);
  var tokenContext = (_proTheme$useToken = _useStyle.proTheme.useToken) === null || _proTheme$useToken === void 0 ? void 0 : _proTheme$useToken.call(_useStyle.proTheme);
  var containerDomRef = (0, _react.useRef)(null);
  var proProvide = (0, _react.useContext)(ProConfigContext);

  /**
   * pro 的 类
   * @type {string}
   * @example .ant-pro
   */

  var proComponentsCls = prefixCls ? ".".concat(prefixCls) : ".".concat(getPrefixCls(), "-pro");
  var antCls = '.' + getPrefixCls();
  var salt = "".concat(proComponentsCls);
  /**
   * 合并一下token，不然导致嵌套 token 失效
   */
  var proLayoutTokenMerge = (0, _react.useMemo)(function () {
    return (0, _layoutToken.getLayoutDesignToken)(propsToken || {}, tokenContext.token || _token.defaultToken);
  }, [propsToken, tokenContext.token]);
  var proProvideValue = (0, _react.useMemo)(function () {
    var _proProvide$intl;
    var localeName = locale === null || locale === void 0 ? void 0 : locale.locale;
    var key = (0, _intl.findIntlKeyByAntdLocaleKey)(localeName);
    // antd 的 key 存在的时候以 antd 的为主
    var intl = localeName && ((_proProvide$intl = proProvide.intl) === null || _proProvide$intl === void 0 ? void 0 : _proProvide$intl.locale) === 'default' ? _intl.intlMap[key] : proProvide.intl || _intl.intlMap[key];
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, proProvide), {}, {
      dark: dark !== null && dark !== void 0 ? dark : proProvide.dark,
      token: (0, _merge.merge)(proProvide.token, tokenContext.token, {
        proComponentsCls: proComponentsCls,
        antCls: antCls,
        themeId: tokenContext.theme.id,
        layout: proLayoutTokenMerge
      }),
      intl: intl || _intl.zhCNIntl
    });
  }, [locale === null || locale === void 0 ? void 0 : locale.locale, proProvide, dark, tokenContext.token, tokenContext.theme.id, proComponentsCls, antCls, proLayoutTokenMerge]);
  var finalToken = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, proProvideValue.token || {}), {}, {
    proComponentsCls: proComponentsCls
  });
  var _useCacheToken = (0, _cssinjs.useCacheToken)(tokenContext.theme, [tokenContext.token, finalToken !== null && finalToken !== void 0 ? finalToken : {}], {
      salt: salt
    }),
    _useCacheToken2 = (0, _slicedToArray2.default)(_useCacheToken, 2),
    token = _useCacheToken2[0],
    nativeHashId = _useCacheToken2[1];
  var hashId = (0, _react.useMemo)(function () {
    var _process$env$NODE_ENV;
    if (props.hashed === false) {
      return '';
    }
    if (proProvide.hashed === false) return '';
    if (typeof process !== 'undefined' && ((_process$env$NODE_ENV = process.env.NODE_ENV) === null || _process$env$NODE_ENV === void 0 ? void 0 : _process$env$NODE_ENV.toLowerCase()) !== 'test') return nativeHashId;
    return '';
  }, [nativeHashId, proProvide.hashed, props.hashed]);
  var configProviderDom = (0, _react.useMemo)(function () {
    var _process$env$NODE_ENV2;
    var themeConfig = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, restConfig.theme), {}, {
      hashId: hashId,
      hashed: typeof process !== 'undefined' && ((_process$env$NODE_ENV2 = process.env.NODE_ENV) === null || _process$env$NODE_ENV2 === void 0 ? void 0 : _process$env$NODE_ENV2.toLowerCase()) !== 'test' && props.hashed !== false && proProvide.hashed !== false
    });
    var provide = /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.ConfigProvider, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, restConfig), {}, {
      theme: (0, _objectSpread2.default)({}, themeConfig),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ProConfigContext.Provider, {
        value: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, proProvideValue), {}, {
          valueTypeMap: valueTypeMap || (proProvideValue === null || proProvideValue === void 0 ? void 0 : proProvideValue.valueTypeMap),
          token: token,
          containerDomRef: containerDomRef,
          theme: tokenContext.theme,
          hashed: props.hashed,
          hashId: hashId
        }),
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [autoClearCache && /*#__PURE__*/(0, _jsxRuntime.jsx)(CacheClean, {}), children]
        })
      })
    }));
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: containerDomRef,
      className: "".concat(prefixCls || (getPrefixCls === null || getPrefixCls === void 0 ? void 0 : getPrefixCls('pro')) || 'ant-pro').concat(hashId ? ' ' + hashId : ''),
      children: provide
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoClearCache, children, getPrefixCls, hashId, locale, proProvideValue, token]);
  if (!autoClearCache) return configProviderDom;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_swr.SWRConfig, {
    value: {
      provider: function provider() {
        return new Map();
      }
    },
    children: configProviderDom
  });
};

/**
 * 用于配置 Pro 的一些全局性的东西
 * @param props
 * @returns
 */
var ProConfigProvider = function ProConfigProvider(props) {
  var needDeps = props.needDeps,
    dark = props.dark,
    token = props.token;
  var proProvide = (0, _react.useContext)(ProConfigContext);
  var _useContext2 = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext),
    locale = _useContext2.locale,
    theme = _useContext2.theme,
    rest = (0, _objectWithoutProperties2.default)(_useContext2, _excluded2);

  // 是不是不需要渲染 provide
  var isNullProvide = needDeps && proProvide.hashId !== undefined && Object.keys(props).sort().join('-') === 'children-needDeps';
  if (isNullProvide) return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: props.children
  });
  var mergeAlgorithm = function mergeAlgorithm() {
    var isDark = dark !== null && dark !== void 0 ? dark : proProvide.dark;
    if (isDark && !Array.isArray(theme === null || theme === void 0 ? void 0 : theme.algorithm)) {
      return [_useStyle.proTheme.darkAlgorithm, theme === null || theme === void 0 ? void 0 : theme.algorithm].filter(Boolean);
    }
    if (isDark && Array.isArray(theme === null || theme === void 0 ? void 0 : theme.algorithm)) {
      return [_useStyle.proTheme.darkAlgorithm].concat((0, _toConsumableArray2.default)((theme === null || theme === void 0 ? void 0 : theme.algorithm) || [])).filter(Boolean);
    }
    return theme === null || theme === void 0 ? void 0 : theme.algorithm;
  };
  // 自动注入 antd 的配置
  var configProvider = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, rest), {}, {
    locale: locale || _zh_CN.default,
    theme: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, theme), {}, {
      algorithm: mergeAlgorithm()
    })
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.ConfigProvider, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, configProvider), {}, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ConfigProviderContainer, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
      token: token
    }))
  }));
};

/**
 * It returns the intl object from the context if it exists, otherwise it returns the intl object for
 * 获取国际化的方法
 * @param locale
 * @param localeMap
 * the current locale
 * @returns The return value of the function is the intl object.
 */
exports.ProConfigProvider = ProConfigProvider;
function useIntl() {
  var _useContext3 = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext),
    locale = _useContext3.locale;
  var _useContext4 = (0, _react.useContext)(ProConfigContext),
    intl = _useContext4.intl;
  if (intl && intl.locale !== 'default') {
    return intl || _intl.zhCNIntl;
  }
  if (locale !== null && locale !== void 0 && locale.locale) {
    return _intl.intlMap[(0, _intl.findIntlKeyByAntdLocaleKey)(locale.locale)] || _intl.zhCNIntl;
  }
  return _intl.zhCNIntl;
}
ProConfigContext.displayName = 'ProProvider';
var ProProvider = ProConfigContext;
exports.ProProvider = ProProvider;
var _default = ProConfigContext;
exports.default = _default;