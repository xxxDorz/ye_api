function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useEmotionCss } from "./..";
import { css } from '@emotion/css';
import { Button, ConfigProvider } from 'antd';
import React, { useState } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var Demo = function Demo() {
  var className = useEmotionCss(function (_ref) {
    var token = _ref.token;
    var style = {
      color: token.colorPrimary,
      display: 'flex',
      alignItems: 'center',
      gap: 8
    };
    return style;
  });
  var blockClassName = useEmotionCss(function (_ref2) {
    var token = _ref2.token;
    var style = {
      backgroundColor: token.colorPrimary,
      width: 12,
      height: 12
    };
    return style;
  });
  return /*#__PURE__*/_jsxs("div", {
    className: className,
    children: [/*#__PURE__*/_jsx("div", {
      className: blockClassName
    }), /*#__PURE__*/_jsx("span", {
      children: "Hello World"
    })]
  });
};

var colorList = [{
  key: 'techBlue',
  color: '#1677FF'
}, {
  key: 'daybreak',
  color: '#1890ff'
}, {
  key: 'dust',
  color: '#F5222D'
}, {
  key: 'volcano',
  color: '#FA541C'
}, {
  key: 'sunset',
  color: '#FAAD14'
}, {
  key: 'cyan',
  color: '#13C2C2'
}, {
  key: 'green',
  color: '#52C41A'
}, {
  key: 'geekblue',
  color: '#2F54EB'
}, {
  key: 'purple',
  color: '#722ED1'
}];
export default (function () {
  var _useState = useState('#1890ff'),
      _useState2 = _slicedToArray(_useState, 2),
      color = _useState2[0],
      setColor = _useState2[1];

  var colorListDom = colorList.map(function (item) {
    return /*#__PURE__*/_jsx("div", {
      className: css({
        backgroundColor: item.color,
        width: 24,
        height: 24,
        borderRadius: 24,
        border: color === item.color ? '4px solid #eee' : undefined
      }),
      onClick: function onClick() {
        setColor(item.color);
      }
    }, item.key);
  });
  return /*#__PURE__*/_jsx(ConfigProvider, {
    theme: {
      token: {
        colorPrimary: color
      }
    },
    children: /*#__PURE__*/_jsxs("div", {
      style: {
        display: 'flex',
        gap: 24,
        padding: 24,
        flexDirection: 'column'
      },
      children: [/*#__PURE__*/_jsx("div", {
        style: {
          display: 'flex',
          gap: 8,
          alignItems: 'center'
        },
        children: colorListDom
      }), /*#__PURE__*/_jsx(Demo, {}), /*#__PURE__*/_jsx("div", {
        children: /*#__PURE__*/_jsx(Button, {
          type: "primary",
          children: "\u6309\u94AE"
        })
      })]
    })
  });
});